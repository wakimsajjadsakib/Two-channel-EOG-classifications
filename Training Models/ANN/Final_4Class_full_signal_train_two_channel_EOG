{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"XhGKlPUBAwl2"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sn\n","\n","from sklearn.preprocessing import LabelEncoder\n","from imblearn.over_sampling import SMOTE\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","\n","import tensorflow\n","from tensorflow import keras\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from sklearn.utils import shuffle\n","\n","\n","\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Conv1D, MaxPooling1D, Flatten\n","from tensorflow.keras.optimizers import Adam\n","\n","\n","import pickle\n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"im5AIL8sAyam"},"outputs":[],"source":["data = pd.read_csv('/content/drive/MyDrive/machine learning/EOG/1_Conf and journal/_Main_Project_/Test/Dataset/Training_dataset_300.csv')\n","\n","data = data.iloc[:, -8:]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HGAfueX80c-I"},"outputs":[],"source":["y = data['Label']\n","x = data.drop('Label',axis=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QGZTxT5yVOcx"},"outputs":[],"source":["\n","\n","le = LabelEncoder()\n","y = le.fit_transform(y)\n","y_smote = le.fit_transform(y_smote)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qDHty85OfA33"},"outputs":[],"source":["from sklearn.utils import shuffle\n","\n","data= shuffle(data, random_state=32)\n","data.reset_index(drop=True, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":397},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1723893262497,"user":{"displayName":"Wakim Sajjad","userId":"09476343385685823005"},"user_tz":-360},"id":"oijTyzL8fsjs","outputId":"6a9b16bd-9fb1-48d4-d987-21eed484b44e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Label\n","Down         300\n","Left         300\n","DownLeft     300\n","Blink        300\n","DownRight    300\n","UP           300\n","Right        300\n","UpRight      300\n","UpLeft       300\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Down</th>\n","      <td>300</td>\n","    </tr>\n","    <tr>\n","      <th>Left</th>\n","      <td>300</td>\n","    </tr>\n","    <tr>\n","      <th>DownLeft</th>\n","      <td>300</td>\n","    </tr>\n","    <tr>\n","      <th>Blink</th>\n","      <td>300</td>\n","    </tr>\n","    <tr>\n","      <th>DownRight</th>\n","      <td>300</td>\n","    </tr>\n","    <tr>\n","      <th>UP</th>\n","      <td>300</td>\n","    </tr>\n","    <tr>\n","      <th>Right</th>\n","      <td>300</td>\n","    </tr>\n","    <tr>\n","      <th>UpRight</th>\n","      <td>300</td>\n","    </tr>\n","    <tr>\n","      <th>UpLeft</th>\n","      <td>300</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":12}],"source":["data['Label'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H4va7kAz1AgL"},"outputs":[],"source":["# main_data['label'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OHmAn70P1eSF"},"outputs":[],"source":["data['Label'] = data['Label'].replace(['Right', 'DownRight', 'UpRight', 'DownLeft', 'UpLeft'], 'Left')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":362},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1723893262497,"user":{"displayName":"Wakim Sajjad","userId":"09476343385685823005"},"user_tz":-360},"id":"hcotLT8bA41L","outputId":"63f0b4f2-f121-446d-e847-12d11a4ef484"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: ylabel='count'>"]},"metadata":{},"execution_count":15},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(8, 4))\n","total_Class = data['Label'].value_counts()\n","# colors = ['#e6f2ff', '#b3d9ff', '#80bfff', '#4da6ff', '#1a8cff', '#0072e6', '#1966B3', '#125999', '#0D4C80']\n","data['Label'].value_counts().plot.pie(autopct = '%.2f', fontsize=12, colors=['#80bfff', '#4da6ff', '#1a8cff', '#0072e6'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VxA2a5AmKrMd"},"outputs":[],"source":["data['Label'] = data['Label'].replace({'Blink': 0, 'UP':1, 'Down': 2, 'Left': 3})"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1723893263037,"user":{"displayName":"Wakim Sajjad","userId":"09476343385685823005"},"user_tz":-360},"id":"Wxh6RJ9yKlLs","outputId":"1b8afbee-2bf3-4376-d79c-6c55c484fd73"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Label\n","3    1800\n","2     300\n","0     300\n","1     300\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>1800</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>300</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>300</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>300</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":17}],"source":["data['Label'].value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QGvsAjqNBRvS"},"outputs":[],"source":["y1 = data['Label']\n","x1= data.drop('Label',axis=1)"]},{"cell_type":"code","source":["\n","# print('Before OverSampling, the shape of X: {}'.format(x1.shape))\n","# print('Before OverSampling, the shape of y: {}'.format(y1.shape))\n","# sm1 = SMOTE(random_state=0)\n","# x1_smote, y1_smote = sm1.fit_resample(x1, y1)\n","# print('After OverSampling, the shape of X: {}'.format(x1_smote.shape))\n","# print('After OverSampling, the shape of y: {}'.format(y1_smote.shape))"],"metadata":{"id":"kT6PNA2UxB36","executionInfo":{"status":"ok","timestamp":1756706774275,"user_tz":-360,"elapsed":41,"user":{"displayName":"Wakim Sajjad Sakib","userId":"09476343385685823005"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# from scipy import stats\n","# le = LabelEncoder()\n","# le.fit(data['Label'])\n","# # Define class names from original labels\n","# class_names = le.classes_\n","\n","# # Dictionary to store p-values\n","# p_values = {}\n","\n","# for class_name in class_names:\n","#     # Extract data for the current class from the original and SMOTE datasets\n","#     original_class_data = x1[y1 == class_name].to_numpy()  # Convert to NumPy array\n","#     smote_class_data = x1_smote[y1_smote == class_name].to_numpy()  # Convert to NumPy array\n","\n","#     # Flatten the arrays if they are multi-dimensional\n","#     original_class_data = original_class_data.flatten()\n","#     smote_class_data = smote_class_data.flatten()\n","\n","#     # Check for NaN or infinite values and remove them\n","#     original_class_data = original_class_data[~np.isnan(original_class_data) & ~np.isinf(original_class_data)]\n","#     smote_class_data = smote_class_data[~np.isnan(smote_class_data) & ~np.isinf(smote_class_data)]\n","\n","#     # Check if there is sufficient data left for the test\n","#     if len(original_class_data) > 0 and len(smote_class_data) > 0:\n","#         # Perform Kolmogorov-Smirnov test\n","#         ks_statistic, p_value = stats.ks_2samp(original_class_data, smote_class_data)\n","#         p_values[class_name] = p_value\n","#     else:\n","#         p_values[class_name] = np.nan\n","\n","# # Print p-values and interpret results\n","# for class_name, p_value in p_values.items():\n","#     print(f\"Class: {class_name}, P-value: {p_value}\")\n","#     if np.isnan(p_value):\n","#         print(f\"Class {class_name}: Insufficient data or unable to perform test.\")\n","#     elif p_value < 0.05:\n","#         print(f\"Class {class_name}: Significant difference in distribution (p-value: {p_value})\")\n","#     else:\n","#         print(f\"Class {class_name}: No significant difference in distribution (p-value: {p_value})\")\n"],"metadata":{"id":"mY1AcRQ9xL7g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# f_statistic, p_value = f_oneway(y1, y1_smote)\n","\n","# print(f\"F-statistic: {f_statistic:.2f}\")\n","# print(f\"P-value: {p_value:.3f}\")\n","\n","# # Interpret the results\n","# alpha = 0.05\n","# if p_value < alpha:\n","#     print(\"Reject the null hypothesis: There is a significant difference in means between the groups.\")\n","# else:\n","#     print(\"Fail to reject the null hypothesis: There is no significant difference in means between the groups.\")\n"],"metadata":{"id":"h2GV3wZSzLzf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y1.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"GjzbKD9Rcxcg","executionInfo":{"status":"ok","timestamp":1723893263039,"user_tz":-360,"elapsed":26,"user":{"displayName":"Wakim Sajjad","userId":"09476343385685823005"}},"outputId":"64f8acee-9322-4edb-b2f7-afb8a43d5953"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Label\n","3    1800\n","2     300\n","0     300\n","1     300\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>1800</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>300</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>300</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>300</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PT2OFtKWBbzc"},"outputs":[],"source":["X_train1, X_test1, y_train1, y_test1 = train_test_split(x1, y1, test_size = 0.10, random_state = 32)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"88uqU2K8GN-y"},"outputs":[],"source":["x_test = X_test1.copy()\n","y_test = y_test1.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1723893263039,"user":{"displayName":"Wakim Sajjad","userId":"09476343385685823005"},"user_tz":-360},"id":"1qVEEtDc5euj","outputId":"2ebac465-e1bd-42f6-84b2-6e34a9bbf1af"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      CH1_mean   CH1_max   CH1_min   CH1_std  CH1_skewness  CH1_kurtosis  \\\n","2698  0.234015  0.375086 -0.294102  0.252604      0.255103     -1.610384   \n","2387  0.237507  0.322945 -0.332150  0.227088     -0.875828     -0.854223   \n","1252  0.244766  0.329284 -0.293726  0.250051     -0.356099     -1.657180   \n","401   0.157105  0.223564 -0.216041  0.165107      0.264543     -1.619632   \n","1068  0.266311  0.331505 -0.307775  0.274657     -0.007634     -1.867582   \n","...        ...       ...       ...       ...           ...           ...   \n","510   0.271625  0.416646 -0.386086  0.274410      0.662113     -1.121769   \n","252   0.045365  0.051707 -0.177637  0.059858     -1.364944      1.059533   \n","2136  0.352111  0.416221 -0.453805  0.351221      0.534559     -1.511637   \n","1334  0.159918  0.274969 -0.120987  0.162882      0.004281     -1.797384   \n","1579  0.124152  0.155494 -0.428168  0.158444     -1.555766      1.152650   \n","\n","      Ch1_freq_dom  CH2_mean   CH2_max   CH2_min   CH2_std  CH2_skewness  \\\n","2698      0.868056  0.185831  0.290728 -0.349023  0.206874     -0.537586   \n","2387      0.197978  0.200599  0.319055 -0.315984  0.187124     -0.985432   \n","1252      0.434028  0.170422  0.224615 -0.228571  0.175521      0.295034   \n","401       0.868056  0.199860  0.307354 -0.316272  0.214299      0.137353   \n","1068      0.434028  0.045084  0.109416 -0.046319  0.050094     -0.088541   \n","...            ...       ...       ...       ...       ...           ...   \n","510       0.434028  0.189533  0.346335 -0.297776  0.198524     -0.491300   \n","252       1.302083  0.157328  0.321631 -0.201634  0.176318      0.258187   \n","2136      0.434028  0.149799  0.171741 -0.205949  0.149758      0.438753   \n","1334      0.434028  0.223058  0.204394 -0.373604  0.230454      0.013141   \n","1579      0.434028  0.119425  0.334674 -0.148379  0.145378      1.074076   \n","\n","      CH2_kurtosis  CH2_freq_dom  \n","2698     -1.254741      0.868056  \n","2387     -0.498128      0.197978  \n","1252     -1.699971      0.434028  \n","401      -1.605344      0.868056  \n","1068     -1.419729      0.434028  \n","...            ...           ...  \n","510      -0.996127      0.434028  \n","252      -1.410718      1.302083  \n","2136     -1.585289      0.434028  \n","1334     -1.764123      0.434028  \n","1579     -0.253763      1.384483  \n","\n","[2430 rows x 14 columns]"],"text/html":["\n","  <div id=\"df-2605bac8-5793-4279-ac07-a3f7fb2bd190\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CH1_mean</th>\n","      <th>CH1_max</th>\n","      <th>CH1_min</th>\n","      <th>CH1_std</th>\n","      <th>CH1_skewness</th>\n","      <th>CH1_kurtosis</th>\n","      <th>Ch1_freq_dom</th>\n","      <th>CH2_mean</th>\n","      <th>CH2_max</th>\n","      <th>CH2_min</th>\n","      <th>CH2_std</th>\n","      <th>CH2_skewness</th>\n","      <th>CH2_kurtosis</th>\n","      <th>CH2_freq_dom</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2698</th>\n","      <td>0.234015</td>\n","      <td>0.375086</td>\n","      <td>-0.294102</td>\n","      <td>0.252604</td>\n","      <td>0.255103</td>\n","      <td>-1.610384</td>\n","      <td>0.868056</td>\n","      <td>0.185831</td>\n","      <td>0.290728</td>\n","      <td>-0.349023</td>\n","      <td>0.206874</td>\n","      <td>-0.537586</td>\n","      <td>-1.254741</td>\n","      <td>0.868056</td>\n","    </tr>\n","    <tr>\n","      <th>2387</th>\n","      <td>0.237507</td>\n","      <td>0.322945</td>\n","      <td>-0.332150</td>\n","      <td>0.227088</td>\n","      <td>-0.875828</td>\n","      <td>-0.854223</td>\n","      <td>0.197978</td>\n","      <td>0.200599</td>\n","      <td>0.319055</td>\n","      <td>-0.315984</td>\n","      <td>0.187124</td>\n","      <td>-0.985432</td>\n","      <td>-0.498128</td>\n","      <td>0.197978</td>\n","    </tr>\n","    <tr>\n","      <th>1252</th>\n","      <td>0.244766</td>\n","      <td>0.329284</td>\n","      <td>-0.293726</td>\n","      <td>0.250051</td>\n","      <td>-0.356099</td>\n","      <td>-1.657180</td>\n","      <td>0.434028</td>\n","      <td>0.170422</td>\n","      <td>0.224615</td>\n","      <td>-0.228571</td>\n","      <td>0.175521</td>\n","      <td>0.295034</td>\n","      <td>-1.699971</td>\n","      <td>0.434028</td>\n","    </tr>\n","    <tr>\n","      <th>401</th>\n","      <td>0.157105</td>\n","      <td>0.223564</td>\n","      <td>-0.216041</td>\n","      <td>0.165107</td>\n","      <td>0.264543</td>\n","      <td>-1.619632</td>\n","      <td>0.868056</td>\n","      <td>0.199860</td>\n","      <td>0.307354</td>\n","      <td>-0.316272</td>\n","      <td>0.214299</td>\n","      <td>0.137353</td>\n","      <td>-1.605344</td>\n","      <td>0.868056</td>\n","    </tr>\n","    <tr>\n","      <th>1068</th>\n","      <td>0.266311</td>\n","      <td>0.331505</td>\n","      <td>-0.307775</td>\n","      <td>0.274657</td>\n","      <td>-0.007634</td>\n","      <td>-1.867582</td>\n","      <td>0.434028</td>\n","      <td>0.045084</td>\n","      <td>0.109416</td>\n","      <td>-0.046319</td>\n","      <td>0.050094</td>\n","      <td>-0.088541</td>\n","      <td>-1.419729</td>\n","      <td>0.434028</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>510</th>\n","      <td>0.271625</td>\n","      <td>0.416646</td>\n","      <td>-0.386086</td>\n","      <td>0.274410</td>\n","      <td>0.662113</td>\n","      <td>-1.121769</td>\n","      <td>0.434028</td>\n","      <td>0.189533</td>\n","      <td>0.346335</td>\n","      <td>-0.297776</td>\n","      <td>0.198524</td>\n","      <td>-0.491300</td>\n","      <td>-0.996127</td>\n","      <td>0.434028</td>\n","    </tr>\n","    <tr>\n","      <th>252</th>\n","      <td>0.045365</td>\n","      <td>0.051707</td>\n","      <td>-0.177637</td>\n","      <td>0.059858</td>\n","      <td>-1.364944</td>\n","      <td>1.059533</td>\n","      <td>1.302083</td>\n","      <td>0.157328</td>\n","      <td>0.321631</td>\n","      <td>-0.201634</td>\n","      <td>0.176318</td>\n","      <td>0.258187</td>\n","      <td>-1.410718</td>\n","      <td>1.302083</td>\n","    </tr>\n","    <tr>\n","      <th>2136</th>\n","      <td>0.352111</td>\n","      <td>0.416221</td>\n","      <td>-0.453805</td>\n","      <td>0.351221</td>\n","      <td>0.534559</td>\n","      <td>-1.511637</td>\n","      <td>0.434028</td>\n","      <td>0.149799</td>\n","      <td>0.171741</td>\n","      <td>-0.205949</td>\n","      <td>0.149758</td>\n","      <td>0.438753</td>\n","      <td>-1.585289</td>\n","      <td>0.434028</td>\n","    </tr>\n","    <tr>\n","      <th>1334</th>\n","      <td>0.159918</td>\n","      <td>0.274969</td>\n","      <td>-0.120987</td>\n","      <td>0.162882</td>\n","      <td>0.004281</td>\n","      <td>-1.797384</td>\n","      <td>0.434028</td>\n","      <td>0.223058</td>\n","      <td>0.204394</td>\n","      <td>-0.373604</td>\n","      <td>0.230454</td>\n","      <td>0.013141</td>\n","      <td>-1.764123</td>\n","      <td>0.434028</td>\n","    </tr>\n","    <tr>\n","      <th>1579</th>\n","      <td>0.124152</td>\n","      <td>0.155494</td>\n","      <td>-0.428168</td>\n","      <td>0.158444</td>\n","      <td>-1.555766</td>\n","      <td>1.152650</td>\n","      <td>0.434028</td>\n","      <td>0.119425</td>\n","      <td>0.334674</td>\n","      <td>-0.148379</td>\n","      <td>0.145378</td>\n","      <td>1.074076</td>\n","      <td>-0.253763</td>\n","      <td>1.384483</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2430 rows × 14 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2605bac8-5793-4279-ac07-a3f7fb2bd190')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2605bac8-5793-4279-ac07-a3f7fb2bd190 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2605bac8-5793-4279-ac07-a3f7fb2bd190');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5cf9c0e5-6147-445b-ba6c-548c60a35f94\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5cf9c0e5-6147-445b-ba6c-548c60a35f94')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5cf9c0e5-6147-445b-ba6c-548c60a35f94 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f60f7930-c630-4cb5-8053-464b679eec78\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_train1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f60f7930-c630-4cb5-8053-464b679eec78 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_train1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train1","summary":"{\n  \"name\": \"X_train1\",\n  \"rows\": 2430,\n  \"fields\": [\n    {\n      \"column\": \"CH1_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09693033361075121,\n        \"min\": 0.0043111692562194,\n        \"max\": 0.4399770722771949,\n        \"num_unique_values\": 2430,\n        \"samples\": [\n          0.2170666258528366,\n          0.1854904112137081,\n          0.0584010739984696\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH1_max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13341038741640493,\n        \"min\": -0.0263145814806003,\n        \"max\": 0.6545135494739446,\n        \"num_unique_values\": 2326,\n        \"samples\": [\n          0.0473317759947928,\n          0.3333079935517429,\n          0.3928375022092065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH1_min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13941043843789672,\n        \"min\": -0.560178276187429,\n        \"max\": 0.0068669972904928,\n        \"num_unique_values\": 2329,\n        \"samples\": [\n          -0.0205777910228107,\n          -0.1121486670691776,\n          -0.3858157764443041\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH1_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09847924484361441,\n        \"min\": 0.0051882649730402,\n        \"max\": 0.4526528445752015,\n        \"num_unique_values\": 2430,\n        \"samples\": [\n          0.2363239027212006,\n          0.2032392834392856,\n          0.068209145769877\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH1_skewness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6762304472383632,\n        \"min\": -2.1555636990066067,\n        \"max\": 2.2947342472229986,\n        \"num_unique_values\": 2430,\n        \"samples\": [\n          -0.2381993470944585,\n          -0.871185085998818,\n          0.1689929738345544\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH1_kurtosis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0441325271066728,\n        \"min\": -1.8996503346460245,\n        \"max\": 5.870491682445996,\n        \"num_unique_values\": 2430,\n        \"samples\": [\n          -1.5499654313937865,\n          -0.8985380390314751,\n          -1.1278702526911228\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ch1_freq_dom\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28144967756304,\n        \"min\": 0.0,\n        \"max\": 1.7361111111111112,\n        \"num_unique_values\": 395,\n        \"samples\": [\n          0.4583185018877812,\n          0.5385541579494126,\n          0.6200011280808259\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH2_mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07453065531563845,\n        \"min\": 0.00920390076307,\n        \"max\": 0.4615068636424269,\n        \"num_unique_values\": 2430,\n        \"samples\": [\n          0.0455510015402275,\n          0.1619793869041151,\n          0.1814164164264264\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH2_max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12532317695917028,\n        \"min\": 0.0240956852649266,\n        \"max\": 0.8334965567674951,\n        \"num_unique_values\": 2339,\n        \"samples\": [\n          0.3171246797415922,\n          0.2090560432103436,\n          0.2695765718444527\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH2_min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11525036868532694,\n        \"min\": -0.6921206005084612,\n        \"max\": 0.0782941463413214,\n        \"num_unique_values\": 2287,\n        \"samples\": [\n          -0.4408107074714126,\n          -0.1507231686961757,\n          -0.162632479192551\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH2_std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07758926249349624,\n        \"min\": 0.0113002939637815,\n        \"max\": 0.506757371274597,\n        \"num_unique_values\": 2430,\n        \"samples\": [\n          0.050933768971736,\n          0.19936033867242,\n          0.2090451614891162\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH2_skewness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6678107215251302,\n        \"min\": -2.014437145024604,\n        \"max\": 2.36357924407203,\n        \"num_unique_values\": 2430,\n        \"samples\": [\n          -0.6576751578867381,\n          -0.1908411763051964,\n          0.4369599996554325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH2_kurtosis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0824850190149777,\n        \"min\": -1.847200391245828,\n        \"max\": 4.754529703967839,\n        \"num_unique_values\": 2430,\n        \"samples\": [\n          -0.8963275407783948,\n          -0.6804921904028962,\n          -1.008054826123516\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CH2_freq_dom\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3362169833133573,\n        \"min\": 0.0,\n        \"max\": 3.4722222222222223,\n        \"num_unique_values\": 395,\n        \"samples\": [\n          0.429067943305108,\n          0.811409952494198,\n          0.0040104485618666\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":25}],"source":["X_train1"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1723893263039,"user":{"displayName":"Wakim Sajjad","userId":"09476343385685823005"},"user_tz":-360},"id":"sjVkh6PvMQcY","outputId":"4e785666-caf5-4849-d237-1690bcb6a623"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Label\n","3    1618\n","2     274\n","0     271\n","1     267\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>1618</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>274</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>271</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>267</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":26}],"source":["y_train1.value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1723893263039,"user":{"displayName":"Wakim Sajjad","userId":"09476343385685823005"},"user_tz":-360},"id":"6FAZFqlaMUgC","outputId":"c51e0e72-299e-47c9-a763-48e42d759649"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Label\n","3    182\n","1     33\n","0     29\n","2     26\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>182</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>33</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>29</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>26</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":27}],"source":["y_test1.value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QTysh86jBgGn"},"outputs":[],"source":["\n","sc1 = StandardScaler()\n","\n","X_train1 = sc1.fit_transform(X_train1)\n","X_test1 = sc1.transform(X_test1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jKmurZ00Bn3n"},"outputs":[],"source":["\n","classifier1 = Sequential()\n","\n","# Adding the input layer and the first hidden layer\n","classifier1.add(Dense( 30, input_dim = 14,  activation = 'relu' ))\n","\n","classifier1.add(Dense( 16,  activation = 'relu' ))\n","\n","\n","# Adding the output layer\n","classifier1.add(Dense(4, activation = 'softmax'))\n","\n","#%%                      Compiling the ANN\n","\n","classifier1.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy',\n","                   metrics = ['accuracy'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":63131,"status":"ok","timestamp":1723893326151,"user":{"displayName":"Wakim Sajjad","userId":"09476343385685823005"},"user_tz":-360},"id":"jfRPSgTXBr4Z","outputId":"051f2b51-34bd-4ed9-9119-7bf8ebeec520"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.4482 - loss: 1.2262 - val_accuracy: 0.7444 - val_loss: 0.6022\n","Epoch 2/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7834 - loss: 0.5576 - val_accuracy: 0.8444 - val_loss: 0.4359\n","Epoch 3/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8738 - loss: 0.4129 - val_accuracy: 0.8704 - val_loss: 0.3558\n","Epoch 4/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8930 - loss: 0.3438 - val_accuracy: 0.8852 - val_loss: 0.3012\n","Epoch 5/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9109 - loss: 0.2783 - val_accuracy: 0.9037 - val_loss: 0.2585\n","Epoch 6/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9233 - loss: 0.2247 - val_accuracy: 0.9037 - val_loss: 0.2392\n","Epoch 7/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9208 - loss: 0.2182 - val_accuracy: 0.9111 - val_loss: 0.2167\n","Epoch 8/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9381 - loss: 0.1830 - val_accuracy: 0.9222 - val_loss: 0.1985\n","Epoch 9/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9318 - loss: 0.1772 - val_accuracy: 0.9222 - val_loss: 0.1886\n","Epoch 10/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9336 - loss: 0.1730 - val_accuracy: 0.9185 - val_loss: 0.1823\n","Epoch 11/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9397 - loss: 0.1484 - val_accuracy: 0.9222 - val_loss: 0.1715\n","Epoch 12/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9473 - loss: 0.1518 - val_accuracy: 0.9370 - val_loss: 0.1604\n","Epoch 13/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9536 - loss: 0.1341 - val_accuracy: 0.9444 - val_loss: 0.1587\n","Epoch 14/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9530 - loss: 0.1259 - val_accuracy: 0.9481 - val_loss: 0.1479\n","Epoch 15/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9482 - loss: 0.1342 - val_accuracy: 0.9481 - val_loss: 0.1401\n","Epoch 16/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9588 - loss: 0.1172 - val_accuracy: 0.9481 - val_loss: 0.1321\n","Epoch 17/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9605 - loss: 0.1165 - val_accuracy: 0.9556 - val_loss: 0.1327\n","Epoch 18/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9633 - loss: 0.1058 - val_accuracy: 0.9556 - val_loss: 0.1229\n","Epoch 19/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9551 - loss: 0.1145 - val_accuracy: 0.9593 - val_loss: 0.1177\n","Epoch 20/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9730 - loss: 0.0938 - val_accuracy: 0.9556 - val_loss: 0.1220\n","Epoch 21/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9732 - loss: 0.0891 - val_accuracy: 0.9667 - val_loss: 0.1079\n","Epoch 22/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9762 - loss: 0.0837 - val_accuracy: 0.9593 - val_loss: 0.1059\n","Epoch 23/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9752 - loss: 0.0912 - val_accuracy: 0.9667 - val_loss: 0.1068\n","Epoch 24/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9801 - loss: 0.0696 - val_accuracy: 0.9556 - val_loss: 0.1063\n","Epoch 25/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9745 - loss: 0.0856 - val_accuracy: 0.9593 - val_loss: 0.1040\n","Epoch 26/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9763 - loss: 0.0717 - val_accuracy: 0.9593 - val_loss: 0.1006\n","Epoch 27/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9851 - loss: 0.0595 - val_accuracy: 0.9704 - val_loss: 0.0890\n","Epoch 28/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9798 - loss: 0.0655 - val_accuracy: 0.9667 - val_loss: 0.0906\n","Epoch 29/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9823 - loss: 0.0707 - val_accuracy: 0.9667 - val_loss: 0.0886\n","Epoch 30/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9805 - loss: 0.0678 - val_accuracy: 0.9667 - val_loss: 0.0843\n","Epoch 31/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9841 - loss: 0.0547 - val_accuracy: 0.9741 - val_loss: 0.0794\n","Epoch 32/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9861 - loss: 0.0551 - val_accuracy: 0.9741 - val_loss: 0.0761\n","Epoch 33/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9844 - loss: 0.0678 - val_accuracy: 0.9704 - val_loss: 0.0760\n","Epoch 34/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9863 - loss: 0.0596 - val_accuracy: 0.9704 - val_loss: 0.0796\n","Epoch 35/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9864 - loss: 0.0464 - val_accuracy: 0.9778 - val_loss: 0.0721\n","Epoch 36/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9873 - loss: 0.0499 - val_accuracy: 0.9741 - val_loss: 0.0677\n","Epoch 37/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9875 - loss: 0.0491 - val_accuracy: 0.9741 - val_loss: 0.0723\n","Epoch 38/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9855 - loss: 0.0492 - val_accuracy: 0.9741 - val_loss: 0.0648\n","Epoch 39/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9914 - loss: 0.0447 - val_accuracy: 0.9741 - val_loss: 0.0662\n","Epoch 40/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9861 - loss: 0.0469 - val_accuracy: 0.9778 - val_loss: 0.0638\n","Epoch 41/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9867 - loss: 0.0465 - val_accuracy: 0.9815 - val_loss: 0.0596\n","Epoch 42/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9892 - loss: 0.0388 - val_accuracy: 0.9815 - val_loss: 0.0530\n","Epoch 43/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9884 - loss: 0.0440 - val_accuracy: 0.9778 - val_loss: 0.0547\n","Epoch 44/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9890 - loss: 0.0428 - val_accuracy: 0.9741 - val_loss: 0.0667\n","Epoch 45/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9918 - loss: 0.0382 - val_accuracy: 0.9741 - val_loss: 0.0529\n","Epoch 46/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9922 - loss: 0.0350 - val_accuracy: 0.9741 - val_loss: 0.0509\n","Epoch 47/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9911 - loss: 0.0373 - val_accuracy: 0.9778 - val_loss: 0.0524\n","Epoch 48/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9920 - loss: 0.0327 - val_accuracy: 0.9778 - val_loss: 0.0563\n","Epoch 49/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9921 - loss: 0.0355 - val_accuracy: 0.9778 - val_loss: 0.0486\n","Epoch 50/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9916 - loss: 0.0303 - val_accuracy: 0.9778 - val_loss: 0.0533\n","Epoch 51/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9884 - loss: 0.0366 - val_accuracy: 0.9778 - val_loss: 0.0467\n","Epoch 52/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9913 - loss: 0.0298 - val_accuracy: 0.9778 - val_loss: 0.0484\n","Epoch 53/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9920 - loss: 0.0307 - val_accuracy: 0.9778 - val_loss: 0.0475\n","Epoch 54/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9885 - loss: 0.0322 - val_accuracy: 0.9815 - val_loss: 0.0415\n","Epoch 55/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9910 - loss: 0.0299 - val_accuracy: 0.9778 - val_loss: 0.0475\n","Epoch 56/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9927 - loss: 0.0255 - val_accuracy: 0.9778 - val_loss: 0.0396\n","Epoch 57/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9951 - loss: 0.0256 - val_accuracy: 0.9852 - val_loss: 0.0360\n","Epoch 58/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9955 - loss: 0.0244 - val_accuracy: 0.9778 - val_loss: 0.0414\n","Epoch 59/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9935 - loss: 0.0260 - val_accuracy: 0.9778 - val_loss: 0.0482\n","Epoch 60/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9958 - loss: 0.0225 - val_accuracy: 0.9852 - val_loss: 0.0374\n","Epoch 61/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9926 - loss: 0.0248 - val_accuracy: 0.9889 - val_loss: 0.0382\n","Epoch 62/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9935 - loss: 0.0214 - val_accuracy: 0.9926 - val_loss: 0.0328\n","Epoch 63/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9937 - loss: 0.0224 - val_accuracy: 0.9889 - val_loss: 0.0315\n","Epoch 64/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9960 - loss: 0.0206 - val_accuracy: 0.9815 - val_loss: 0.0404\n","Epoch 65/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9961 - loss: 0.0191 - val_accuracy: 0.9926 - val_loss: 0.0298\n","Epoch 66/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9955 - loss: 0.0223 - val_accuracy: 0.9926 - val_loss: 0.0329\n","Epoch 67/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9964 - loss: 0.0154 - val_accuracy: 0.9815 - val_loss: 0.0435\n","Epoch 68/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9960 - loss: 0.0170 - val_accuracy: 0.9889 - val_loss: 0.0368\n","Epoch 69/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9965 - loss: 0.0142 - val_accuracy: 0.9889 - val_loss: 0.0318\n","Epoch 70/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9959 - loss: 0.0162 - val_accuracy: 0.9889 - val_loss: 0.0313\n","Epoch 71/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9962 - loss: 0.0171 - val_accuracy: 0.9889 - val_loss: 0.0326\n","Epoch 72/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9965 - loss: 0.0183 - val_accuracy: 0.9852 - val_loss: 0.0351\n","Epoch 73/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9971 - loss: 0.0117 - val_accuracy: 0.9815 - val_loss: 0.0399\n","Epoch 74/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9954 - loss: 0.0167 - val_accuracy: 0.9889 - val_loss: 0.0334\n","Epoch 75/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9973 - loss: 0.0144 - val_accuracy: 0.9815 - val_loss: 0.0363\n","Epoch 76/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9950 - loss: 0.0163 - val_accuracy: 0.9889 - val_loss: 0.0331\n","Epoch 77/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9971 - loss: 0.0138 - val_accuracy: 0.9889 - val_loss: 0.0357\n","Epoch 78/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9947 - loss: 0.0162 - val_accuracy: 0.9889 - val_loss: 0.0328\n","Epoch 79/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9985 - loss: 0.0108 - val_accuracy: 0.9926 - val_loss: 0.0267\n","Epoch 80/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9975 - loss: 0.0120 - val_accuracy: 0.9926 - val_loss: 0.0300\n","Epoch 81/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9973 - loss: 0.0108 - val_accuracy: 0.9889 - val_loss: 0.0303\n","Epoch 82/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9991 - loss: 0.0116 - val_accuracy: 0.9889 - val_loss: 0.0315\n","Epoch 83/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9966 - loss: 0.0133 - val_accuracy: 0.9926 - val_loss: 0.0270\n","Epoch 84/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9975 - loss: 0.0095 - val_accuracy: 0.9889 - val_loss: 0.0306\n","Epoch 85/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9990 - loss: 0.0100 - val_accuracy: 0.9889 - val_loss: 0.0273\n","Epoch 86/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9994 - loss: 0.0089 - val_accuracy: 0.9926 - val_loss: 0.0247\n","Epoch 87/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9981 - loss: 0.0105 - val_accuracy: 0.9889 - val_loss: 0.0261\n","Epoch 88/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9989 - loss: 0.0091 - val_accuracy: 0.9889 - val_loss: 0.0353\n","Epoch 89/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9962 - loss: 0.0108 - val_accuracy: 0.9889 - val_loss: 0.0365\n","Epoch 90/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9982 - loss: 0.0092 - val_accuracy: 0.9926 - val_loss: 0.0256\n","Epoch 91/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9992 - loss: 0.0070 - val_accuracy: 0.9926 - val_loss: 0.0281\n","Epoch 92/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9974 - loss: 0.0095 - val_accuracy: 0.9889 - val_loss: 0.0311\n","Epoch 93/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9969 - loss: 0.0083 - val_accuracy: 0.9852 - val_loss: 0.0331\n","Epoch 94/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9992 - loss: 0.0052 - val_accuracy: 0.9926 - val_loss: 0.0192\n","Epoch 95/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9980 - loss: 0.0102 - val_accuracy: 0.9889 - val_loss: 0.0316\n","Epoch 96/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9991 - loss: 0.0067 - val_accuracy: 0.9889 - val_loss: 0.0330\n","Epoch 97/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9981 - loss: 0.0077 - val_accuracy: 0.9889 - val_loss: 0.0403\n","Epoch 98/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9985 - loss: 0.0075 - val_accuracy: 0.9889 - val_loss: 0.0232\n","Epoch 99/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9994 - loss: 0.0054 - val_accuracy: 0.9926 - val_loss: 0.0231\n","Epoch 100/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9983 - loss: 0.0072 - val_accuracy: 0.9926 - val_loss: 0.0210\n","Epoch 101/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9992 - loss: 0.0060 - val_accuracy: 0.9889 - val_loss: 0.0313\n","Epoch 102/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9990 - loss: 0.0055 - val_accuracy: 0.9889 - val_loss: 0.0271\n","Epoch 103/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9987 - loss: 0.0056 - val_accuracy: 0.9926 - val_loss: 0.0225\n","Epoch 104/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9997 - loss: 0.0060 - val_accuracy: 0.9889 - val_loss: 0.0353\n","Epoch 105/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9974 - loss: 0.0065 - val_accuracy: 0.9963 - val_loss: 0.0186\n","Epoch 106/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9985 - loss: 0.0073 - val_accuracy: 0.9889 - val_loss: 0.0386\n","Epoch 107/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9982 - loss: 0.0070 - val_accuracy: 0.9889 - val_loss: 0.0283\n","Epoch 108/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9986 - loss: 0.0055 - val_accuracy: 0.9926 - val_loss: 0.0262\n","Epoch 109/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9991 - loss: 0.0051 - val_accuracy: 0.9963 - val_loss: 0.0183\n","Epoch 110/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9985 - loss: 0.0062 - val_accuracy: 0.9926 - val_loss: 0.0226\n","Epoch 111/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9983 - loss: 0.0076 - val_accuracy: 0.9926 - val_loss: 0.0191\n","Epoch 112/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9992 - loss: 0.0047 - val_accuracy: 0.9926 - val_loss: 0.0182\n","Epoch 113/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9966 - loss: 0.0067 - val_accuracy: 0.9926 - val_loss: 0.0128\n","Epoch 114/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9988 - loss: 0.0047 - val_accuracy: 0.9926 - val_loss: 0.0251\n","Epoch 115/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9988 - loss: 0.0057 - val_accuracy: 0.9926 - val_loss: 0.0244\n","Epoch 116/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9990 - loss: 0.0040 - val_accuracy: 0.9889 - val_loss: 0.0325\n","Epoch 117/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9974 - loss: 0.0081 - val_accuracy: 0.9926 - val_loss: 0.0283\n","Epoch 118/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9998 - loss: 0.0038 - val_accuracy: 0.9926 - val_loss: 0.0198\n","Epoch 119/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9981 - loss: 0.0046 - val_accuracy: 0.9889 - val_loss: 0.0283\n","Epoch 120/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9976 - loss: 0.0062 - val_accuracy: 0.9963 - val_loss: 0.0161\n","Epoch 121/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9984 - loss: 0.0046 - val_accuracy: 0.9889 - val_loss: 0.0341\n","Epoch 122/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9975 - loss: 0.0055 - val_accuracy: 0.9926 - val_loss: 0.0230\n","Epoch 123/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9995 - loss: 0.0035 - val_accuracy: 0.9926 - val_loss: 0.0315\n","Epoch 124/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9983 - loss: 0.0048 - val_accuracy: 0.9963 - val_loss: 0.0193\n","Epoch 125/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9997 - loss: 0.0041 - val_accuracy: 0.9926 - val_loss: 0.0170\n","Epoch 126/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9996 - loss: 0.0038 - val_accuracy: 0.9926 - val_loss: 0.0255\n","Epoch 127/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9994 - loss: 0.0044 - val_accuracy: 0.9926 - val_loss: 0.0157\n","Epoch 128/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9992 - loss: 0.0036 - val_accuracy: 0.9963 - val_loss: 0.0153\n","Epoch 129/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9991 - loss: 0.0038 - val_accuracy: 0.9926 - val_loss: 0.0151\n","Epoch 130/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9999 - loss: 0.0034 - val_accuracy: 0.9963 - val_loss: 0.0116\n","Epoch 131/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9968 - loss: 0.0058 - val_accuracy: 0.9926 - val_loss: 0.0278\n","Epoch 132/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9993 - loss: 0.0023 - val_accuracy: 0.9963 - val_loss: 0.0178\n","Epoch 133/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9994 - loss: 0.0031 - val_accuracy: 0.9963 - val_loss: 0.0187\n","Epoch 134/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9995 - loss: 0.0036 - val_accuracy: 0.9926 - val_loss: 0.0188\n","Epoch 135/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9992 - loss: 0.0025 - val_accuracy: 0.9926 - val_loss: 0.0232\n","Epoch 136/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9997 - loss: 0.0038 - val_accuracy: 0.9963 - val_loss: 0.0197\n","Epoch 137/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0047 - val_accuracy: 0.9926 - val_loss: 0.0173\n","Epoch 138/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9992 - loss: 0.0030 - val_accuracy: 0.9926 - val_loss: 0.0198\n","Epoch 139/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9991 - loss: 0.0033 - val_accuracy: 0.9926 - val_loss: 0.0200\n","Epoch 140/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9999 - loss: 0.0019 - val_accuracy: 0.9963 - val_loss: 0.0142\n","Epoch 141/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9999 - loss: 0.0043 - val_accuracy: 0.9963 - val_loss: 0.0181\n","Epoch 142/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0033 - val_accuracy: 0.9926 - val_loss: 0.0206\n","Epoch 143/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9992 - loss: 0.0032 - val_accuracy: 0.9963 - val_loss: 0.0192\n","Epoch 144/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9981 - loss: 0.0036 - val_accuracy: 0.9926 - val_loss: 0.0218\n","Epoch 145/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9998 - loss: 0.0021 - val_accuracy: 0.9926 - val_loss: 0.0159\n","Epoch 146/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9984 - loss: 0.0049 - val_accuracy: 0.9963 - val_loss: 0.0142\n","Epoch 147/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0020 - val_accuracy: 0.9926 - val_loss: 0.0191\n","Epoch 148/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9990 - loss: 0.0031 - val_accuracy: 0.9926 - val_loss: 0.0118\n","Epoch 149/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9997 - loss: 0.0026 - val_accuracy: 0.9926 - val_loss: 0.0158\n","Epoch 150/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9997 - loss: 0.0022 - val_accuracy: 0.9926 - val_loss: 0.0204\n","Epoch 151/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9993 - loss: 0.0033 - val_accuracy: 0.9926 - val_loss: 0.0213\n","Epoch 152/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9997 - loss: 0.0023 - val_accuracy: 0.9926 - val_loss: 0.0262\n","Epoch 153/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9998 - loss: 0.0021 - val_accuracy: 0.9963 - val_loss: 0.0169\n","Epoch 154/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9999 - loss: 0.0027 - val_accuracy: 0.9963 - val_loss: 0.0136\n","Epoch 155/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9986 - loss: 0.0026 - val_accuracy: 0.9963 - val_loss: 0.0134\n","Epoch 156/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0018 - val_accuracy: 0.9963 - val_loss: 0.0116\n","Epoch 157/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0017 - val_accuracy: 0.9926 - val_loss: 0.0149\n","Epoch 158/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0014 - val_accuracy: 0.9926 - val_loss: 0.0173\n","Epoch 159/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9996 - loss: 0.0026 - val_accuracy: 0.9926 - val_loss: 0.0239\n","Epoch 160/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0027 - val_accuracy: 0.9926 - val_loss: 0.0182\n","Epoch 161/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9999 - loss: 0.0016 - val_accuracy: 0.9963 - val_loss: 0.0117\n","Epoch 162/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0017 - val_accuracy: 0.9926 - val_loss: 0.0156\n","Epoch 163/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9993 - loss: 0.0018 - val_accuracy: 0.9963 - val_loss: 0.0225\n","Epoch 164/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 1.0000 - loss: 0.0022 - val_accuracy: 0.9963 - val_loss: 0.0101\n","Epoch 165/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9997 - loss: 0.0020 - val_accuracy: 0.9926 - val_loss: 0.0205\n","Epoch 166/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 1.0000 - loss: 0.0022 - val_accuracy: 0.9926 - val_loss: 0.0144\n","Epoch 167/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 1.0000 - loss: 0.0015 - val_accuracy: 0.9963 - val_loss: 0.0124\n","Epoch 168/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 1.0000 - loss: 9.3342e-04 - val_accuracy: 0.9926 - val_loss: 0.0238\n","Epoch 169/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9999 - loss: 0.0014 - val_accuracy: 0.9926 - val_loss: 0.0201\n","Epoch 170/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 1.0000 - loss: 0.0022 - val_accuracy: 0.9963 - val_loss: 0.0148\n","Epoch 171/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 1.0000 - loss: 0.0014 - val_accuracy: 0.9926 - val_loss: 0.0149\n","Epoch 172/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9998 - loss: 9.6422e-04 - val_accuracy: 0.9926 - val_loss: 0.0129\n","Epoch 173/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0017 - val_accuracy: 0.9963 - val_loss: 0.0083\n","Epoch 174/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9994 - loss: 0.0018 - val_accuracy: 0.9963 - val_loss: 0.0088\n","Epoch 175/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0013 - val_accuracy: 0.9926 - val_loss: 0.0128\n","Epoch 176/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9976 - loss: 0.0117 - val_accuracy: 0.9926 - val_loss: 0.0120\n","Epoch 177/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0017 - val_accuracy: 1.0000 - val_loss: 0.0037\n","Epoch 178/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9999 - loss: 9.2115e-04 - val_accuracy: 0.9926 - val_loss: 0.0130\n","Epoch 179/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9991 - loss: 0.0033 - val_accuracy: 0.9963 - val_loss: 0.0109\n","Epoch 180/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9999 - loss: 0.0014 - val_accuracy: 0.9963 - val_loss: 0.0088\n","Epoch 181/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0014 - val_accuracy: 0.9926 - val_loss: 0.0108\n","Epoch 182/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0018 - val_accuracy: 0.9926 - val_loss: 0.0171\n","Epoch 183/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9998 - loss: 9.2833e-04 - val_accuracy: 0.9926 - val_loss: 0.0157\n","Epoch 184/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9999 - loss: 7.6133e-04 - val_accuracy: 0.9963 - val_loss: 0.0051\n","Epoch 185/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0010 - val_accuracy: 0.9963 - val_loss: 0.0163\n","Epoch 186/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0013 - val_accuracy: 0.9963 - val_loss: 0.0049\n","Epoch 187/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0013 - val_accuracy: 0.9926 - val_loss: 0.0249\n","Epoch 188/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9988 - loss: 0.0024 - val_accuracy: 0.9926 - val_loss: 0.0271\n","Epoch 189/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9978 - loss: 0.0039 - val_accuracy: 0.9963 - val_loss: 0.0105\n","Epoch 190/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 0.0012 - val_accuracy: 0.9926 - val_loss: 0.0180\n","Epoch 191/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 5.7268e-04 - val_accuracy: 0.9963 - val_loss: 0.0054\n","Epoch 192/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 8.2068e-04 - val_accuracy: 0.9963 - val_loss: 0.0113\n","Epoch 193/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 6.4916e-04 - val_accuracy: 0.9963 - val_loss: 0.0102\n","Epoch 194/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 7.9419e-04 - val_accuracy: 0.9963 - val_loss: 0.0083\n","Epoch 195/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 8.1760e-04 - val_accuracy: 0.9926 - val_loss: 0.0115\n","Epoch 196/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 5.0691e-04 - val_accuracy: 0.9963 - val_loss: 0.0060\n","Epoch 197/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 6.0172e-04 - val_accuracy: 0.9926 - val_loss: 0.0179\n","Epoch 198/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9995 - loss: 9.5890e-04 - val_accuracy: 0.9963 - val_loss: 0.0152\n","Epoch 199/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 9.3593e-04 - val_accuracy: 0.9926 - val_loss: 0.0139\n","Epoch 200/200\n","\u001b[1m76/76\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 1.0000 - loss: 6.2820e-04 - val_accuracy: 0.9963 - val_loss: 0.0095\n","Elapsed time: 63.09 seconds\n"]}],"source":["import time\n","\n","# Start the timer\n","start_time = time.time()\n","\n","\n","batch_size1= 32\n","epochs1 = 200\n","\n","history1 = classifier1.fit(X_train1, y_train1,\n","          batch_size=batch_size1,\n","          epochs=epochs1,\n","          validation_data=(X_test1, y_test1))\n","\n","# Stop the timer\n","end_time = time.time()\n","\n","# Calculate the elapsed time\n","elapsed_time = end_time - start_time\n","\n","# Print the elapsed time\n","print(\"Elapsed time: {:.2f} seconds\".format(elapsed_time))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1723893326151,"user":{"displayName":"Wakim Sajjad","userId":"09476343385685823005"},"user_tz":-360},"id":"OeEag0WTBtq9","outputId":"896232ec-71cc-4173-dc53-ac8cfdbcdcbf"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step \n","Accuracy of the model: 0.9962962962962963\n"]}],"source":["\n","y_pred1 = classifier1.predict(X_test1)\n","y_pred1 = np.argmax(y_pred1, axis=1)\n","from sklearn.metrics import accuracy_score\n","accuracy1 = accuracy_score(y_test1, y_pred1)\n","print(\"Accuracy of the model:\", accuracy1)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1723893326152,"user":{"displayName":"Wakim Sajjad","userId":"09476343385685823005"},"user_tz":-360},"id":"sknnRSlhPd56","outputId":"a68db17d-1ccb-4d46-87fd-d981b2491365"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.97      1.00      0.98        29\n","           1       1.00      0.97      0.98        33\n","           2       1.00      1.00      1.00        26\n","           3       1.00      1.00      1.00       182\n","\n","    accuracy                           1.00       270\n","   macro avg       0.99      0.99      0.99       270\n","weighted avg       1.00      1.00      1.00       270\n","\n"]}],"source":["\n","from sklearn.metrics import classification_report\n","\n","print(classification_report(y_test1, y_pred1))"]},{"cell_type":"code","source":["\n","validation_data = data.sample(frac=0.2, random_state=32)\n","\n","start_time = time.time()\n","y_pred_validation = classifier1.predict(validation_data.drop('Label', axis=1))\n","validation_time = end_time - start_time\n","print(\"Validation time: {:.2f} seconds\".format(validation_time))\n"],"metadata":{"id":"iyRoi7AZ294N","executionInfo":{"status":"ok","timestamp":1723893327321,"user_tz":-360,"elapsed":1174,"user":{"displayName":"Wakim Sajjad","userId":"09476343385685823005"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"045ec95a-d8bd-4228-93a1-95e382377376"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m17/17\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step \n","Validation time: 0.13 seconds\n"]}]},{"cell_type":"code","source":["\n","accuracy = accuracy_score(y_test1, y_pred1)\n","precision = precision_score(y_test1, y_pred1, average='macro')\n","recall = recall_score(y_test1, y_pred1, average='macro')\n","f1 = f1_score(y_test1, y_pred1, average='macro')\n","\n","print(\"Accuracy:\", accuracy)\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cRo3NEuio0dB","executionInfo":{"status":"ok","timestamp":1723893327322,"user_tz":-360,"elapsed":18,"user":{"displayName":"Wakim Sajjad","userId":"09476343385685823005"}},"outputId":"b1e1995a-bbdc-47ef-9af4-5f5286461247"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9962962962962963\n","Precision: 0.9916666666666667\n","Recall: 0.9924242424242424\n","F1-score: 0.991916558018253\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(20, 5))\n","plt.plot(history1.history['val_loss'], linestyle='--')\n","plt.plot(history1.history['loss'], linestyle='--')\n","plt.ylabel('Loss', fontsize=16)\n","plt.xlabel('Epoch', fontsize=16)\n","plt.legend(['Validation Loss', 'Training Loss'], fontsize=16)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":400},"id":"ArWXm2ybdBB0","executionInfo":{"status":"ok","timestamp":1723896433825,"user_tz":-360,"elapsed":1974,"user":{"displayName":"Wakim Sajjad","userId":"09476343385685823005"}},"outputId":"714094d8-776b-4c8a-bdf6-9e4f9c8dc2a1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JdnZprQHl9v_"},"outputs":[],"source":["# classifier1.save('/content/drive/MyDrive/machine learning/EOG/1_Conf and journal/_Main_Project_/Test/Models/Two Channel/oversample/ANN1n.h5')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TJETgLq9eJJT"},"outputs":[],"source":["# Save the scalers\n","# with open('/content/drive/MyDrive/machine learning/EOG/1_Conf and journal/_Main_Project_/Test/Models/Two Channel/oversample/scl_ANN1n.pkl', 'wb') as f:\n","#     pickle.dump(sc1, f)"]},{"cell_type":"code","source":[],"metadata":{"id":"1zmboBuWiQ6c"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"mount_file_id":"1YGs_pPPJbC2thX3qclZqkrXdMpIt-GYy","authorship_tag":"ABX9TyPxns4lnpTjMQ3b3J9ZgwLx"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}